class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] dir= {{1,0},{-1,0},{0,1},{0,-1}};
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j]==word.charAt(0)){
                    if(dfs(i, j, 0, board, word, dir)) return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(int i, int j, int index, char[][] board, String word, int[][] dir){
        if(index==word.length()) return true;
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!=word.charAt(index)) return false;
        char temp= board[i][j];
        board[i][j]='-';
        for(int[] di: dir){
            if(dfs(i+di[0], j+di[1], index+1, board, word, dir)) return true;
        }
        board[i][j]= temp;
        return false;
    }
}
o(n*m*4*wordlen)
