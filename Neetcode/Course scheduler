class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj= new ArrayList<>();
        int[] indegree= new int[numCourses];
        int[] topoOrder= new int[numCourses];
        Queue<Integer> queue= new LinkedList<>();

        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] pre: prerequisites){
            adj.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                queue.add(i);
            }
        }
        int topoLen=0;
        while(!queue.isEmpty()){
            int cur= queue.remove();
            topoOrder[topoLen]= cur;
            topoLen++;
            for(int nbr: adj.get(cur)){
                indegree[nbr]--;
                if(indegree[nbr]==0) queue.add(nbr);
            }
        }
        if(topoLen!=numCourses) return new int[0];
        return topoOrder;
    }
}
