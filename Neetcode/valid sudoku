class Solution {
    public boolean isValidSudoku(char[][] board) {
        for(int i=0; i< board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j]!='.'){
                    if(!isValidSudoku(board, i, j, board[i][j])) return false;
                }
            }
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board, int row, int col, int val){
        for(int i=0; i<board[0].length; i++){
            if(board[row][i]== val && i!=col) return false;
        }

        for(int i=0; i<board.length; i++){
            if(board[i][col]== val && i!=row) return false;
        }

        int r= row/3*3;
        int c= col/3*3;
        for(int i=r; i<r+3; i++){
            for(int j=c; j<c+3; j++){
                if(board[i][j]== val && !(i==row && j==col)) return false;
            }
        }
        return true;
    }
}
//tc: 9*9*9
//sc: 1


class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashMap<Integer, List<Character>> row= new HashMap<>();
        HashMap<Integer, List<Character>> col= new HashMap<>();
        HashMap<Integer, List<Character>> square= new HashMap<>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                char val= board[i][j];
                if(val=='.') continue;
                if(row.containsKey(i) && row.get(i).contains(val)) return false;
                if(col.containsKey(j) && col.get(j).contains(val)) return false;
                int squareIndex= i/3*3+ j/3;
                if(square.containsKey(squareIndex) && square.get(squareIndex).contains(val)) return false;

                if(!row.containsKey(i)) row.put(i, new ArrayList<>());
                if(!col.containsKey(j)) col.put(j, new ArrayList<>());
                if(!square.containsKey(squareIndex)) square.put(squareIndex, new ArrayList<>());

                row.get(i).add(val);
                col.get(j).add(val);
                square.get(squareIndex).add(val);
            }
        }
        return true;
    }
}

// tc: 9*9
// sc: 9*9*9
