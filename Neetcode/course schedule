class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj= new ArrayList<>();
        for(int i=0; i<numCourses; i++) adj.add(new ArrayList<>());
        int[] indegree= new int[numCourses];
        int topoLen=0;
        for(int[] pre: prerequisites){
            adj.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }
        Queue<Integer> queue= new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0) queue.add(i);
        }
        while(!queue.isEmpty()){
            int node= queue.remove();
            topoLen++;
            indegree[node]--;
            for(int nbr: adj.get(node)){
                indegree[nbr]--;
                if(indegree[nbr]==0) queue.add(nbr);
            }
        }
        return topoLen==numCourses;
    }
}
