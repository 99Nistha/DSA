class Solution {
    public int[][] merge(int[][] arr) {
     int n= arr.length;
        Pair[] pairs= new Pair[n];
        for(int i=0;i<n;i++){
            pairs[i]= new Pair(arr[i][0], arr[i][1]);
        }
        
        Arrays.sort(pairs);
        Stack<Pair> st= new Stack<>();
        for(int i=0;i<pairs.length;i++){
            if(i==0){
                st.push(pairs[i]);
            }else{
                Pair top= st.peek();
                if(pairs[i].st>top.et){
                    st.push(pairs[i]);
                }else{
                    top.et= Math.max(top.et, pairs[i].et);
                }
            }
        }
        
        Stack<Pair> rs= new Stack<>();
        while(st.size()>0){
            rs.push(st.pop());
        }
        
        int[][] result= new int[rs.size()][2];
        int i=0;
        while(rs.size()>0){
            Pair p= rs.pop();
            result[i][0]=p.st;
            result[i][1]=p.et;
            i++;
        }
        return result;
    }
    
    public static class Pair implements Comparable<Pair>{
        int st;
        int et;
        
        Pair(int st, int et){
            this.st= st;
            this.et= et;
        }
        
        //if this>other +ve
        //this== other 0
        //this<other -ve
        public int compareTo(Pair other){
            if(this.st!= other.st){
                return this.st-other.st;
            }return  this.et-other.et;
        }
    }
}
