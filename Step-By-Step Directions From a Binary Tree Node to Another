/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
    Build directions for both start and destination from the root.
    Say we get "LLRRL" and "LRR".
    Remove common prefix path.
    We remove "L", and now start direction is "LRRL", and destination - "RR"
    Replace all steps in the start direction to "U" and add destination direction.
    The result is "UUUU" + "RR".
    C++
    Here, we build path in the reverse order to avoid creating new strings.
 */
class Solution {

    private boolean find(TreeNode n, int val, StringBuilder sb) {
        if (n.val == val) 
            return true;
        if (n.left != null && find(n.left, val, sb))
            sb.append("L");
        else if (n.right != null && find(n.right, val, sb))
            sb.append("R");
        return sb.length() > 0;
    }

    public String getDirections(TreeNode root, int startValue, int destValue) {
        StringBuilder lb= new StringBuilder(), rb= new StringBuilder();
        find(root, startValue, lb);
        find(root, destValue, rb);
        System.out.println(lb+", "+ rb);
        int min_i= Math.min(lb.length(), rb.length());
        int i=0;
        while (i < min_i && lb.charAt(lb.length() - i - 1) == rb.charAt(rb.length() - i - 1))
            ++i;
        return "U".repeat(lb.length() - i) + rb.reverse().toString().substring(i);
    }
}
