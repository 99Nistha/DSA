import java.util.ArrayList;
import java.util.HashSet;

class Solution {
    public int maximumDetonation(int[][] bombs) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < bombs.length; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < bombs.length; i++) {
            for (int j = i + 1; j < bombs.length; j++) {
                int x1 = bombs[i][0];
                int y1 = bombs[i][1];
                int r1 = bombs[i][2];
                int x2 = bombs[j][0];
                int y2 = bombs[j][1];
                int r2 = bombs[j][2];
                double d = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
                if (d <= r1) {
                    adj.get(i).add(j);
                }
                if (d <= r2) {
                    adj.get(j).add(i);
                }
            }
        }

        int res = 0;
        for (int i = 0; i < bombs.length; i++) {
            HashSet<Integer> visited = new HashSet<>();
            res = Math.max(res, dfs(i, visited, adj));
        }
        return res;
    }

    public int dfs(int index, HashSet<Integer> visited, ArrayList<ArrayList<Integer>> adj){
        if(visited.contains(index)) return 0;
        visited.add(index);
        for(int nbr: adj.get(index)){
            dfs(nbr, visited, adj);
        }
        return visited.size();
    }
}
