class Solution {
    public int largestIsland(int[][] grid) {
        HashMap<Integer, Integer> map= new HashMap<>();
        int[][] dir={{1,0},{-1,0},{0,1},{0,-1}};
        int indexCount=2;
        int n= grid.length;
        int max=0;
        for(int i=0; i<n; i++){
            for(int j=0;j<n; j++){
                if(grid[i][j]==1){
                    int count= dfs(grid, i, j, indexCount, dir);
                    map.put(indexCount, count);
                    max= Math.max(max, count);
                    indexCount++;
                }
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0;j<n; j++){
                if(grid[i][j]==0){
                    HashSet<Integer> set= new HashSet<>();
                    for(int[] dr: dir){
                        int row= i+dr[0];
                        int col= j+dr[1];
                        if(row>=0 && col>=0 && col<grid.length && row<grid.length && grid[row][col]!= 0)
                            set.add(grid[row][col]);
                    }
                    int count=1;
                    for(int s: set)count+=map.get(s);
                    max= Math.max(count, max);
                }
            }
        }
        return max;
    }
    public int dfs(int[][] grid, int i, int j, int indexCount, int[][] dir){
        if(i<0 || j<0 || i>=grid.length || j>=grid.length || grid[i][j]!= 1) return 0;
        grid[i][j]= indexCount;
        int count=0;
        for(int[] dr: dir){
            count+=dfs(grid, i+dr[0], j+dr[1], indexCount, dir);
        }
        return count+1;
    }
}
