class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> set= new HashSet<>(wordList);
        if(!set.contains(endWord)) return 0;
        if(beginWord.equals(endWord)) return 0;
        
        Queue<String> queue= new LinkedList<>();
        queue.add(beginWord);
        set.remove(beginWord);
        
        int changes= 1;
        while(!queue.isEmpty()){ // o(words)
            int size= queue.size();
            for(int i=0;i<size;i++){
                String word= queue.remove();
                if(word.equals(endWord)) return changes; //o(word length)
                
                for(int j=0;j<word.length();j++){ //o(word length)
                    for(int k='a'; k<='z';k++){
                        char[] arr= word.toCharArray();
                        arr[j]= (char)k;
                        
                        String str= new String(arr); // //o(word length)
                        if(set.contains(str)){
                            queue.add(str);
                            set.remove(str);
                        }
                    }
                }
            }
            ++changes;
        }
        return 0;
    }
}
// tc: o(word)*(o(word length)+ o(word length* word length))
// tc: o(word)*o(word length^2)-> o(N*M^2)

// Sc: o(N*M)
