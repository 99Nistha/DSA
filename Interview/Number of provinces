class DisjointSet{
    List<Integer> parent= new ArrayList<>();
    List<Integer> size= new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0;i<=n;i++){
            parent.add(i);
            size.add(0);
        }
    }
    
    public int findUPar(int node){
        if(node==parent.get(node)) return node;
        return findUPar(parent.get(node));
    }
    
    public void unionBySize(int u, int v){
        int ulp_u= findUPar(u);
        int ulp_v= findUPar(v);
        if(ulp_u== ulp_v) return;
        int sum= size.get(ulp_u)+ size.get(ulp_v);
        if(size.get(ulp_u)<size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, sum);
        }else{
           parent.set(ulp_v, ulp_u);
           size.set(ulp_u, sum);
        }
    }
    
}
class Solution {
    public int findCircleNum(int[][] isConnected) {
        int V= isConnected.length;
        DisjointSet ds= new DisjointSet(V);
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(isConnected[i][j]==1){
                    ds.unionBySize(i,j);
                }
            }
        }
        int count=0;
        for(int i=0;i<V;i++){
            if(ds.parent.get(i)==i) count++;
        }
        return count;
    }
}
