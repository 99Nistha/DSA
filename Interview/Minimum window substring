class Solution {
    public String minWindow(String s, String t) {
        if(s== null || t==null || s.isEmpty() || t.isEmpty()) return "";
        Map<Character, Integer> map= new HashMap<>();
        for(char ch: t.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0)+1);
        }
        int n= s.length();
        int i=0, j=0, count= map.size();
        int left=0, right= n-1, min=n;

        boolean found= false;

        while(j<n){
            char endChar= s.charAt(j++);
            if(map.containsKey(endChar)){
                map.put(endChar, map.get(endChar)-1);
                if(map.get(endChar)==0) count--;
            }
            if(count>0) continue;
            while(count==0){
                char startChar= s.charAt(i++);
                if(map.containsKey(startChar)){
                    map.put(startChar, map.get(startChar)+1);
                    if(map.get(startChar)>0) count++;
                }
            }
            if((j-i)<min){
                left= i;
                right= j;
                min= j-i;
                found= true;
            }
        }
        return !found ? "": s.substring(left-1, right);
    }
}
tc: o(n+m)
sc: o(m)
