class Solution {
    int max=0;
    public int getMaximumGold(int[][] grid) {
        boolean[][] visited= new boolean[grid.length][grid[0].length];
        for(int i=0;i<grid.length; i++){
            for(int j=0;j<grid[0].length; j++){
                if(grid[i][j]!=0){
                    dfs(grid, i, j, 0, visited);
                }
            }
        }
        return max;
    }
    public void dfs(int[][] grid, int i, int j, int sum, boolean[][] visited){
        if(i<0 || j<0|| i>=grid.length || j>=grid[0].length || grid[i][j]==0 || visited[i][j]){
            max= Math.max(max, sum);
            return;
        }
        visited[i][j]= true;
        dfs(grid, i+1, j, sum+grid[i][j], visited);
        dfs(grid, i, j+1, sum+grid[i][j], visited);
        dfs(grid, i-1, j, sum+grid[i][j], visited);
        dfs(grid, i, j-1, sum+grid[i][j], visited);
        visited[i][j]= false;
    }
}
