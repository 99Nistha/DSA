class Solution {
    public int numIslands(char[][] grid) {
        int[][] dir= {{0,1}, {0,-1}, {1,0}, {-1,0}};
        int count=0;
        for(int i=0;i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j]=='1'){
                    count++;
                    bfs(i, j, dir, grid);
                }
            }
        }
        return count;
    }
    public void bfs(int i, int j, int[][] dir, char[][] grid){
        Queue<Pair> queue= new LinkedList<>();
        queue.add(new Pair(i, j));
        grid[i][j]= '0';
        while(!queue.isEmpty()){
            Pair curr= queue.remove();
            for(int[] d: dir){
                int row= curr.row+d[0];
                int col= curr.col+d[1];
                if(row>=0 && row<grid.length && col>=0 && col< grid[0].length && grid[row][col]=='1'){
                    grid[row][col]= '0';
                    queue.add(new Pair(row, col));
                }  
            }
        }
        return;
    }
}
class Pair{
    int row;
    int col;
    public Pair(int row, int col){
        this.row= row;
        this.col= col;
    }
}
