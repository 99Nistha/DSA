class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<n;i++) adj.add(new ArrayList<>());
        int[] indegree= new int[n];
        for(int[] relation: relations){
            adj.get(relation[0]-1).add(relation[1]-1);
            indegree[relation[1]-1]++;
        }    
        Queue<Integer> queue= new LinkedList<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==0) queue.add(i);
        }
        int semester=0;
        while(!queue.isEmpty()){
            int size= queue.size();
            while(size!=0){
                size--;
                int subject= queue.remove();
                for(int nbr: adj.get(subject)){
                    indegree[nbr]--;
                    if(indegree[nbr]==0) queue.add(nbr);
                }
            }
            semester++;
        }
        for(int i=0;i<n;i++){
            if(indegree[i]!=0) return -1;
        }
        return semester==0 ?-1:semester;
    }
}
// 1->2
// 2->3
// 3->1
// 4->1

// 4-> 1->2->3
//     ^     |
//     |_____|
// -------------
// 1. unreachable subjects-> handeled
// 2. cycle, with no open end-> none of the indegree is zero
// 3. cycle, where we still can take few cources-> how to check if all the subjects are covered-> indegree should be zero-> even if 1 of non zero disovered-> return -1
