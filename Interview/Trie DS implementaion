class Node {
    char ch;
    boolean isWord;
    Node[] children;
    public Node(char ch){
        this.ch= ch;
        this.isWord= false;
        this.children= new Node[26];
    }
}
class Trie {
    private Node root;
    public Trie() {
        root= new Node('#');
    }
    
    public void insert(String word) {
        Node curr= root;
        for(char ch: word.toCharArray()){
            if(curr.children[ch-'a']==null){
                curr.children[ch-'a']= new Node(ch);
            }
            curr= curr.children[ch-'a'];
        }
        curr.isWord= true;
    }
    
    public boolean search(String word) {
        Node curr= root;
        for(char ch: word.toCharArray()){
            if(curr.children[ch-'a']==null) return false;
            curr= curr.children[ch-'a'];
        }
        return curr.isWord;
    }
     
    public boolean startsWith(String prefix) {
        Node curr= root;
        for(char ch: prefix.toCharArray()){
            if(curr.children[ch-'a']==null) return false;
            curr= curr.children[ch-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
