//bfs
class Solution
{
    //Function to return a list of lists of integers denoting the members 
    //of strongly connected components in the given graph.  
    public ArrayList<ArrayList<Integer>> tarjans(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // code here
        ArrayList<ArrayList<Integer>> res= new ArrayList<>();
        //1. to do the topo sort- dfs
        boolean[] vis = new boolean[V];
        Stack<Integer> st= new Stack<>();
        for(int i=0; i<V;i++){
            if(!vis[i]) dfs(st, vis, i, adj);
        }
        //2. to make the traspose
        ArrayList<ArrayList<Integer>> transpose= new ArrayList<>();
        for(int i=0;i<V;i++){
            transpose.add(new ArrayList<>());
        }
        for(int i=0;i<V;i++){
            vis[i]=false;
            for(int it: adj.get(i)){
                transpose.get(it).add(i);
            }
        }
        //3. to do the topo sort
        while(!st.isEmpty()){
            int curr= st.pop();
            if(!vis[curr]){
                ArrayList<Integer> ans= new ArrayList<>();
                reverseDfs(transpose, curr, ans, vis);
                res.add(ans);
            }
        }
        return res;
    }
    public void dfs(Stack<Integer> st, boolean[] vis, int curr, ArrayList<ArrayList<Integer>> adj){
        vis[curr]= true;
        for(int it: adj.get(curr)){
            if(!vis[it]) dfs(st, vis, it, adj);
        }
        st.push(curr);
    }
    
    public void reverseDfs(ArrayList<ArrayList<Integer>> transpose, int curr, ArrayList<Integer> ans, boolean[] vis){
        vis[curr]= true;
        ans.add(curr);
        for(int it: transpose.get(curr)){
            if(!vis[it]) reverseDfs(transpose, it, ans, vis);
        }
    }
}
