class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int V= graph.length;
        boolean[] visited= new boolean[V];
        boolean[] path= new boolean[V];
        for(int i=0;i<V; i++){
            if(!visited[i]) dfs(i, visited, path, graph);
        }
        List<Integer> safeNode= new ArrayList<>();
        for(int i=0;i<V; i++){
            if(!path[i]) safeNode.add(i);
        }
        return safeNode;
    }
    public boolean dfs(int i, boolean[] visited, boolean[] path, int[][] graph){
        visited[i]= true;
        path[i]= true;
        for(int nbr: graph[i]){
            //not yet visited
            if(!visited[nbr] && dfs(nbr, visited, path, graph)) return true;
            //already visted, but in the same path
            else if(path[nbr]) return true;
        }
        path[i]= false;
        return false;
    }
}
