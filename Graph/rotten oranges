class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Pair> q= new LinkedList<>();
        int n= grid.length; 
        int m= grid[0].length;
        int[][] dir= {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int count=0;
        for(int i=0;i<n; i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i, j));
                }
            }
        }
        count= bfs(count, grid, q, dir);
        for(int i=0;i<n; i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1) return -1;
            }
        }
        return count;
    }
    public int bfs(int count, int[][] grid, Queue<Pair> q, int[][] dir){
        while(!q.isEmpty()){
            int size= q.size();
            while(size!=0){
                size--;
                int r= q.peek().row;
                int c= q.peek().col;
                q.remove();
                for(int[] d: dir){
                    int row= r+d[0];
                    int col= c+d[1];
                    if(row>=0 && row<grid.length && col>=0 && col<grid[0].length && grid[row][col]==1){
                        grid[row][col]= 2;
                        q.add(new Pair(row, col));
                    }
                }
            }
            count++;
        }
        if(count==0) return count;
        return count-1;
    }
}
class Pair{
    int row;
    int col;
    public Pair(int row, int col){
        this.row= row;
        this.col= col;
    }
}

TC: O(N*N) to see the rotten+ O(N*N) to go through all the nodes
SC; O(N*N) queue size
