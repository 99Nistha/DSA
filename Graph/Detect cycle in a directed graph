class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited= new boolean[V];
        boolean[] path= new boolean[V];
        for(int i=0;i<V; i++){
            if(!visited[i] && dfs(i, visited, path, adj)) return true;
        }
        return false;
    }
    public boolean dfs(int i, boolean[] visited, boolean[] path, ArrayList<ArrayList<Integer>> adj){
        visited[i]= true;
        path[i]= true;
        for(int nbr: adj.get(i)){
            //not yet visited
            if(!visited[nbr] && dfs(nbr, visited, path, adj)) return true;
            //already visted, but in the same path
            else if(path[nbr]) return true;
        }
        path[i]= false;
        return false;
    }
}
