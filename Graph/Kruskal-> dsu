class DisjointSet{
    List<Integer> parent= new ArrayList<>();
    List<Integer> size= new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0;i<=n;i++){
            parent.add(i);
            size.add(0);
        }
    }
    
    public int findUPar(int node){
        if(node==parent.get(node)) return node;
        return findUPar(parent.get(node));
    }
    
    public void unionBySize(int u, int v){
        int ulp_u= findUPar(u);
        int ulp_v= findUPar(v);
        if(ulp_u== ulp_v) return;
        int sum= size.get(ulp_u)+ size.get(ulp_v);
        if(size.get(ulp_u)<size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, sum);
        }else{
           parent.set(ulp_v, ulp_u);
            size.set(ulp_u, sum);
        }
    }
    
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. 
	    DisjointSet ds= new DisjointSet(V);
	    Arrays.sort(edges, (a,b)->a[2]-b[2]);
	    int mstwt=0;
	    for(int[] edge: edges){
	        if(ds.findUPar(edge[0])!=ds.findUPar(edge[1])){
	            mstwt+=edge[2];
	            ds.unionBySize(edge[0], edge[1]);
	        }
	    }
	    return mstwt;
	}
}
