class Solution {
    int countDistinctIslands(int[][] grid) {
        // Your Code here
        int n= grid.length;
        int m= grid[0].length;
        int[][] dir= {{1,0}, {-1,0}, {0,1}, {0,-1}};
        boolean[][] visited= new boolean[n][m];
        HashSet<ArrayList<Integer>> set= new HashSet<>();
        for(int i=0;i<n; i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && grid[i][j]==1){
                    ArrayList<Integer> ar= new ArrayList<>();
                    dfs(i, j, visited, grid, dir, ar, i, j);
                    set.add(ar);
                }
            }
        }
        return set.size();
    }
    void dfs(int i, int j, boolean[][] visited, int[][] grid, int[][] dir, 
    ArrayList<Integer> ar, int baseI, int baseJ){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || visited[i][j] || grid[i][j]==0) return;
        visited[i][j]= true;
        ar.add(i-baseI);
        ar.add(j-baseJ);
        for(int[] d: dir){
            int row= i+ d[0];
            int col= j+d[1];
            dfs(row, col, visited, grid, dir, ar, baseI, baseJ);
        }
        return;
    }
}

//total nodes N
// TC: N*logN+ N*4// N-> loops, logN-> hash set push, N8$ calls
//SC: HashSet, viisted,-> O(N)
