class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> adjRev= new ArrayList<>();
        int V= graph.length;
        for(int i=0;i<V;i++) adjRev.add(new ArrayList<>());
        int[] indegree= new int[V];
        for(int i=0;i<V;i++){
            for(int nbr: graph[i]){
                adjRev.get(nbr).add(i);
                indegree[i]++;
            }
        }
        List<Integer> safeNode= new ArrayList<>();
        Queue<Integer> queue= new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0) queue.add(i);
        }
        while(!queue.isEmpty()){
            int node= queue.poll();
            safeNode.add(node);
            indegree[node]--;
            for(int nbr: adjRev.get(node)){
                indegree[nbr]--;
                if(indegree[nbr]==0) queue.add(nbr);
            }
        }
        Collections.sort(safeNode);
        return safeNode;
    }
}
