class Solution
{
    //Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid)
    {
        // Code here
        int n= grid.length;
        int m= grid[0].length;
        int[][] distance= new int[n][m];
        int[][] dist= {{1, 0},  {-1, 0}, {0, 1}, {0, -1}};
        boolean[][] visited= new boolean[n][m];
        int count=1;
        Queue<Pair> q= new LinkedList<>();
        for(int i=0; i<n; i++){
            for(int j=0;j<m; j++){
                if(grid[i][j]==1){
                    visited[i][j]=true;
                    q.add(new Pair(i, j));
                }
            }
        }
        return bfs(q, dist, distance, grid, visited, count);
    }
    public int[][] bfs(Queue<Pair> q, int[][] dist, int[][] distance, int[][] grid, boolean[][] visited, int count){
        while(!q.isEmpty()){
            int size= q.size();
            while(size!=0){
                size--;
                int r= q.peek().row;
                int c= q.peek().col;
                q.remove();
                for(int[] d: dist){
                    int row= r+d[0];
                    int col= c+d[1];
                    if(row>=0 && row<grid.length && col>=0 && col<grid[0].length && !visited[row][col]){
                        q.add(new Pair(row, col));
                        distance[row][col]= count;
                        visited[row][col]= true;
                    }
                }
            }
            count++;
        }
        return distance;
    }
}
class Pair{
    int row;
    int col;
    public Pair(int row, int col){
        this.row= row;
        this.col= col;
    }
}

// TC: O(N)+O(4N) // for loop to find 0 and all nodes explore
// SC: O(N)// distance, queue, viisted
