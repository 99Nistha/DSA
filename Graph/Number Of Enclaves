DFS:

class Solution {
    public int numEnclaves(int[][] grid) {
        int n= grid.length;
        int m= grid[0].length;
        boolean[][] visited= new boolean[n][m];
        int[][] dir= {{1,0},{-1,0},{0,1},{0,-1}};
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if((i==0 || j==0 || i==n-1 || j==m-1) && grid[i][j]==1){
                    dfs(i, j, visited, grid, dir);
                }
            }
        }
        int count=0;
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int i, int j, boolean[][] visited, int[][] grid, int[][] dir){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]==0 || visited[i][j]) return;
        visited[i][j]=true;
        for(int[] d: dir){
            int row= i+d[0];
            int col= j+d[1];
            dfs(row, col, visited, grid, dir);
        }
        return;
    }
}

BFS:
class Solution {
    public int numEnclaves(int[][] grid) {
        int n= grid.length;
        int m= grid[0].length;
        boolean[][] visited= new boolean[n][m];
        int[][] dir= {{1,0},{-1,0},{0,1},{0,-1}};
        Queue<Pair> q= new LinkedList<>();
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if((i==0 || j==0 || i==n-1 || j==m-1) && grid[i][j]==1){
                    visited[i][j]=true;
                    q.add(new Pair(i,j));
                }
            }
        }
        bfs(q, visited, grid, dir);
        int count=0;
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    count++;
                }
            }
        }
        return count;
    }
    public void bfs(Queue<Pair> q, boolean[][] visited, int[][] grid, int[][] dir){
        while(!q.isEmpty()){
            int row= q.peek().row;
            int col= q.peek().col;
            q.remove();
            for(int[] d: dir){
                int i= row+d[0];
                int j= col+d[1];
                if(i>=0 && i<grid.length && j>=0 && j<grid[0].length && grid[i][j]==1 && !visited[i][j]){
                    visited[i][j]= true;
                    q.add(new Pair(i, j));
                }
            }
        }
        return;
    }
}
class Pair{
    int row;
    int col;
    public Pair(int row, int col){
        this.row= row;
        this.col= col;
    }
}
//TC: O(N*M) loop for boundary+ O(4*N*M) // node and the dir= O(N*M)
// SC: O(N*M) visited+ O(N*M) auxillary rec space= O(N*M)
