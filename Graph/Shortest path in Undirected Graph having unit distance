class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // make a adj list
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0; i<n; i++)adj.add(new ArrayList<>());
        for(int[] edge: edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        // bfs
        int[] dist= new int[n];
        Arrays.fill(dist, (int)(1e9));
        Queue<Integer> queue= new LinkedList<>();
        queue.add(src);
        dist[src]= 0;
        while(!queue.isEmpty()){
            int node= queue.poll();
            for(int nbr: adj.get(node)){
                if(dist[node]+1<dist[nbr]){
                    dist[nbr]= dist[node]+1;
                    queue.add(nbr);
                }
            }
        }
        for(int i=0;i<n; i++){
            if(dist[i]==1e9) dist[i]=-1;
        }
        return dist;
    }
}
