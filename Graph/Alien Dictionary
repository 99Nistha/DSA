
class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<K;i++){
            adj.add(new ArrayList<>());
        }
        int[] indegree= new int[K];
        for(int i=0;i<dict.length-1; i++){
            String s1= dict[i];
            String s2= dict[i+1];
            int min= Math.min(s1.length(), s2.length());
            for(int len=0;len<min; len++){
                if(s1.charAt(len)!= s2.charAt(len)){
                    adj.get(s1.charAt(len)-'a').add(s2.charAt(len)-'a');
                    indegree[s2.charAt(len)-'a']++;
                    break;
                }
            }
        }
        return topoSort(adj, K, indegree);
    }
    public String topoSort(ArrayList<ArrayList<Integer>> adj, int K, int[] indegree){
        StringBuilder s= new StringBuilder();
        Queue<Integer> queue= new LinkedList<>();
        for(int i=0;i<K;i++){
            if(indegree[i]==0) queue.add(i);
        }
        while(!queue.isEmpty()){
            int node= queue.poll();
            s.append((char)('a'+node));
            for(int nbr: adj.get(node)){
                indegree[nbr]--;
                if(indegree[nbr]==0) queue.add(nbr);
            }
        }
        return s.toString(); 
    }
}

TC: k+ dict.length*string.length+ k+E-> O(k+E)+o(N*len)
SC: K(adj list, indegree, queue)-> O(K)
