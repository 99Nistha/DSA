class Pair{
    int vertex;
    int weight;
    public Pair(int vertex, int weight){
        this.vertex= vertex;
        this.weight= weight;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<Pair> pq= new PriorityQueue<>((a,b)-> (a.weight-b.weight));
        int[] dist= new int[V];
        Arrays.fill(dist, (int)(1e9));
        pq.add(new Pair(S,0));
        dist[S]=0;
        while(!pq.isEmpty()){
            Pair node= pq.poll();
            int distance= node.weight;
            for(ArrayList<Integer> nbr: adj.get(node.vertex)){
                if((distance+nbr.get(1))<dist[nbr.get(0)]){
                    dist[nbr.get(0)]= distance+nbr.get(1);
                    pq.add(new Pair(nbr.get(0), dist[nbr.get(0)]));
                }
            }
        }
        return dist;
    }
}
