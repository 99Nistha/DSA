class Solution {
    public void solve(char[][] a) {
        int n= a.length;
        int m= a[0].length;
        boolean[][] visited= new boolean[n][m];
        int[][] dir= {{1,0},{-1,0},{0,1},{0,-1}};
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if((i==0 || j==0 || i==n-1 || j==m-1) && a[i][j]=='O'){
                    dfs(i, j, visited, a, dir);
                }
            }
        }
        for(int i=0;i<n; i++){
            for(int j=0;j<m; j++){
                if(a[i][j]=='O' && !visited[i][j]){
                    a[i][j]='X';
                }
            }
        }
        return;
    }
    public void dfs(int i, int j, boolean[][] visited, char[][] a, int[][] dir){
        if(i<0 || i>=a.length || j<0 || j>=a[0].lengt h || a[i][j]=='X' || visited[i][j]) return;
        visited[i][j]=true;
        for(int[] d: dir){
            int row= i+d[0];
            int col= j+d[1];
            dfs(row, col, visited, a, dir);
        }
        return;
    }
}
//TC: O(N*M) loop for boundary+ O(4*N*M) // node and the dir= O(N*M)
// SC: O(N*M) visited+ O(N*M) auxillary rec space= O(N*M)
