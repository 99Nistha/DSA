Recursion:
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m= obstacleGrid.length;
        int n= obstacleGrid[0].length;
        return helper(m-1,n-1,obstacleGrid);
    }
    public int helper(int m, int n, int[][] obstacleGrid){
        if(m>=0 && n>=0 && obstacleGrid[m][n]==1) return 0;
        if(m==0 && n==0) return 1;
        if(m<0 || n<0) return 0;
        int up= helper(m-1, n, obstacleGrid);
        int left= helper(m, n-1, obstacleGrid);
        return up+left;
    }
}
_____________________
Memorization

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m= obstacleGrid.length;
        int n= obstacleGrid[0].length;
        int[][] dp= new int[m][n];
        return helper(m-1,n-1,obstacleGrid, dp);
    }
    public int helper(int m, int n, int[][] obstacleGrid, int[][] dp){
        if(m>=0 && n>=0 && obstacleGrid[m][n]==1) return 0;
        if(m==0 && n==0) return 1;
        if(m<0 || n<0) return 0;
        if(dp[m][n]!=0) return dp[m][n];
        int up= helper(m-1, n, obstacleGrid, dp);
        int left= helper(m, n-1, obstacleGrid, dp);
        return dp[m][n]= up+left;
    }
}
__________________
Tabulation

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m= obstacleGrid.length;
        int n= obstacleGrid[0].length;
        int[][] dp= new int[m][n];
        for(int i=0;i<m; i++){
            for(int j=0;j<n; j++){
                if(i>=0 && j>=0 && obstacleGrid[i][j]==1) dp[i][j]=0;
                else if(i==0 && j==0) dp[i][j]=1;
                else if(i<0 || j<0) dp[i][j]=0;
                else{
                    int up= 0;
                    int left= 0;
                    if(i>0) up= dp[i-1][j];
                    if(j>0) left= dp[i][j-1];
                    dp[i][j]= up+left;
                }
            }
        }
        return dp[m-1][n-1];
    }
}
________________________
space optimization

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m= obstacleGrid.length;
        int n= obstacleGrid[0].length;
        int[]dp= new int[n];
        for(int i=0;i<m; i++){
            int[] temp= new int[n];
            for(int j=0;j<n; j++){
                if(i>=0 && j>=0 && obstacleGrid[i][j]==1) temp[j]=0;
                else if(i==0 && j==0) temp[j]=1;
                else if(i<0 || j<0) temp[j]=0;
                else{
                    int up= dp[j];
                    int left= 0;
                    if(j>0) left= temp[j-1];
                    temp[j]= up+left;
                }
            }
            dp= temp;
        }
        return dp[n-1];
    }
}a
