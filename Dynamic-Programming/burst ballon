recursion:
class Solution {
    public int maxCoins(int[] nums) {
        int n= nums.length;
        int[] num= new int[n+2];
        num[0]= 1;
        int i=0;
        for(i=0; i<n; i++) num[i+1]= nums[i];
        num[i+1]= 1;
        return helper(1, n, num);
    }
    public int helper(int i, int j, int[] num){
        if(i>j) return 0;
        int max= Integer.MIN_VALUE;
        for(int k=i; k<=j; k++){
            int coins= num[i-1]*num[k]*num[j+1]+ helper(i, k-1, num)+ helper(k+1, j, num);
            max= Math.max(max, coins);
        }
        return max;
    }
}

memo:
class Solution {
    public int maxCoins(int[] nums) {
        int n= nums.length;
        int[] num= new int[n+2];
        num[0]= 1;
        int i=0;
        for(i=0; i<n; i++) num[i+1]= nums[i];
        num[i+1]= 1;
        int[][] dp= new int[n+1][n+1];
        return helper(1, n, num, dp);
    }
    public int helper(int i, int j, int[] num, int[][] dp){
        if(i>j) return 0;
        if(dp[i][j]!=0) return dp[i][j];
        int max= Integer.MIN_VALUE;
        for(int k=i; k<=j; k++){
            int coins= num[i-1]*num[k]*num[j+1]+ helper(i, k-1, num, dp)+ helper(k+1, j, num, dp);
            max= Math.max(max, coins);
        }
        return dp[i][j]= max;
    }
}

tabulation:
class Solution {
    public int maxCoins(int[] nums) {
        int n= nums.length;
        int[] num= new int[n+2];
        num[0]= 1;
        int ind=0;
        for(ind=0; ind<n; ind++) num[ind+1]= nums[ind];
        num[ind+1]= 1;
        int[][] dp= new int[n+2][n+2];
        for(int i=n; i>0; i--){
            for(int j= 1; j<=n; j++){
                if(i>j) continue;
                int max= Integer.MIN_VALUE;
                for(int k=i; k<=j; k++){
                    int coins= num[i-1]*num[k]*num[j+1]+ dp[i][k-1]+ dp[k+1][j];
                    max= Math.max(max, coins);
                }
                dp[i][j]= max;
            }
        }
        return dp[1][n];
    }
}
