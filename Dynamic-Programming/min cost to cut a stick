recursion:
class Solution {
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int[] cut= new int[cuts.length+2];
        cut[0]=0;
        int c=0;
        for(c=0; c<cuts.length; c++){
            cut[c+1]= cuts[c];   
        }
        cut[c+1]= n;
        return helper(1, cuts.length, cut);
    }
    public int helper(int i, int j, int[] cut){
        if(i>j) return 0;
        int min= Integer.MAX_VALUE;
        for(int k=i; k<=j; k++){
            int sum= cut[j+1]-cut[i-1] + helper(i, k-1, cut)+ helper(k+1, j, cut);
            min= Math.min(min, sum);
        }
        return min;
    }
}

memo:
class Solution {
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int cutsLen= cuts.length;
        int[] cut= new int[cutsLen+2];
        cut[0]=0;
        int c=0;
        for(c=0; c< cutsLen; c++){
            cut[c+1]= cuts[c];   
        }
        cut[c+1]= n;
        int[][] dp= new int[cutsLen+1][cutsLen+1];
        return helper(1, cutsLen, cut, dp);
    }
    public int helper(int i, int j, int[] cut, int[][] dp){
        if(i>j) return 0;
        int min= Integer.MAX_VALUE;
        if(dp[i][j]!=0) return dp[i][j];
        for(int k=i; k<=j; k++){
            int sum= cut[j+1]-cut[i-1] + helper(i, k-1, cut, dp)+ helper(k+1, j, cut, dp);
            min= Math.min(min, sum);
        }
        return dp[i][j]= min;
    }
}

tabulation:
class Solution {
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int cutsLen= cuts.length;
        int[] cut= new int[cutsLen+2];
        cut[0]=0;
        int c=0;
        for(c=0; c< cutsLen; c++){
            cut[c+1]= cuts[c];   
        }
        cut[c+1]= n;
        int[][] dp= new int[cutsLen+2][cutsLen+2];
        for(int i= cutsLen; i>=1; i--){
            for(int j= 1; j<=cutsLen; j++){
                if(i>j) continue;
                int min= Integer.MAX_VALUE;
                for(int k=i; k<=j; k++){
                    int sum= cut[j+1]-cut[i-1] + dp[i][k-1] + dp[k+1][j];
                    min= Math.min(min, sum);
                }
                dp[i][j]= min;
            }
        }
        return dp[1][cutsLen];
    }
}
