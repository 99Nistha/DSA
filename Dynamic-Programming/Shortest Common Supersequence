class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int len1= str1.length();
        int len2= str2.length();
        int[][] dp= longestCommonSubsequence(len1, len2, str1, str2);
        return getStringFromLCS(dp, str1, str2, len1, len2);
    }
    public int[][] longestCommonSubsequence(int len1, int len2, String str1, String str2){
        int[][] dp= new int[len1+1][len2+1];
        for(int i=1;i<=len1; i++){
            for(int j=1; j<=len2; j++){
                //match
                if(str1.charAt(i-1)== str2.charAt(j-1)){
                    dp[i][j]= 1+ dp[i-1][j-1];
                }else{
                    dp[i][j]= Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp;
    }
    //convert in string builders
    public String getStringFromLCS(int[][] dp, String str1, String str2, int i, int j){
        StringBuilder sb= new StringBuilder();
        while(i>0 && j>0){
            if(str1.charAt(i-1)== str2.charAt(j-1)){
                sb.append(str1.charAt(i-1));
                i--;
                j--;
            }else if(dp[i-1][j]<=dp[i][j-1]){//up
                sb.append(str2.charAt(j-1));
                j--;
            }else if(dp[i-1][j]> dp[i][j-1]){//left
                sb.append(str1.charAt(i-1));
                i--;
            }
        }
        while(i>0){
            sb.append(str1.charAt(i-1));
            i--;
        }
        while(j>0){
            sb.append(str2.charAt(j-1));
            j--;
        }
        return sb.reverse().toString();
    }
}
