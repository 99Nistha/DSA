recursive:
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return helper(text1, text2, text1.length()-1, text2.length()-1);
    }
    public int helper(String text1, String text2, int index1, int index2){
        if(index1<0 || index2<0) return 0;
        //match
        if(text1.charAt(index1)==text2.charAt(index2)){
            return 1+ helper(text1, text2, index1-1, index2-1);
        }
        //not match
        return Math.max(helper(text1, text2, index1-1, index2), helper(text1, text2, index1, index2-1));
    }
}
Memo
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp= new int[text1.length()][text2.length()];
        return helper(text1, text2, text1.length()-1, text2.length()-1, dp);
    }
    public int helper(String text1, String text2, int index1, int index2, int[][] dp){
        if(index1<0 || index2<0) return 0;
        if(dp[index1][index2]!=0) return dp[index1][index2];
        //match
        if(text1.charAt(index1)==text2.charAt(index2)){
            return dp[index1][index2]= 1+ helper(text1, text2, index1-1, index2-1, dp);
        }
        //not match
        return dp[index1][index2]= Math.max(helper(text1, text2, index1-1, index2, dp), helper(text1, text2, index1, index2-1, dp));
    }
}

tabulation
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int len1= text1.length();
        int len2= text2.length();
        int[][] dp= new int[len1+1][len2+1];
        for(int index1=1; index1<=len1; index1++){
            for(int index2=1; index2<=len2; index2++){
                //match
                if(text1.charAt(index1-1)==text2.charAt(index2-1)){
                    dp[index1][index2]= 1+ dp[index1-1][index2-1];
                }else{
                    dp[index1][index2]= Math.max(dp[index1][index2-1], dp[index1-1][index2]);
                }
            }
        }
        return dp[len1][len2];
    }
}

space opt:
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int len1= text1.length();
        int len2= text2.length();
        int[] dp= new int[len2+1];
        for(int index1=1; index1<=len1; index1++){
            int[] temp= new int[len2+1];
            for(int index2=1; index2<=len2; index2++){
                //match
                if(text1.charAt(index1-1)==text2.charAt(index2-1)){
                    temp[index2]= 1+ dp[index2-1];
                }else{
                    temp[index2]= Math.max(temp[index2-1], dp[index2]);
                }
            }
            dp= temp;
        }
        return dp[len2];
    }
}
