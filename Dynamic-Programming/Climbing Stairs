
# Recursion
```
class Solution {
    public int climbStairs(int n) {
        if(n<=1) return 1;
        return climbStairs(n-1)+ climbStairs(n-2);
    }
}
```

# Memorisation
```
class Solution {
    public int climbStairs(int n) {
        int[] dp= new int[n+1];
        Arrays.fill(dp, -1);
        dp[0]=1;
        dp[1]=1;
        return helper(dp, n);
    }
    public int helper(int[] dp, int n){
        if(dp[n]!=-1) return dp[n];
        return dp[n]= helper(dp, n-1) + helper(dp, n-2);
    }
}
```
# Tabulation
```
class Solution {
    public int climbStairs(int n) {
        int[] dp= new int[n+1];
        Arrays.fill(dp, -1);
        if(n<=1) return 1;
        dp[0]=1;
        dp[1]=1;
        for(int i=2; i<=n; i++){
            dp[i]= dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
}
```

# Space optimisation
```
class Solution {
    public int climbStairs(int n) {
        if(n<=1) return 1;
        int prev=1;
        int prev2=1;
        int curr=0;
        for(int i=2; i<=n; i++){
            curr= prev+prev2;
            prev2= prev;
            prev= curr;
        }
        return curr;
    }
}
```
