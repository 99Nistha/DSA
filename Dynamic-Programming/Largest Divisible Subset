class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n= nums.length;
        Arrays.sort(nums);
        int[] dp= new int[n];
        Arrays.fill(dp, 1);
        int[] hash= new int[n];
        int index=0;
        int max=0;
        for(int i=1; i<n; i++){
            hash[i]= i;
            for(int j=0; j<i; j++){
                if(nums[i]% nums[j]==0 && (dp[j]+1> dp[i])){
                    dp[i]= dp[j]+1;
                    hash[i]= j;
                }
            }
            if(dp[i]> max){
                index= i;
                max= dp[i];
            }
        }
        List<Integer> ans= new ArrayList<>();
        ans.add(nums[index]);
        while(hash[index]!=index){
            int prevIndex= hash[index];
            ans.add(nums[prevIndex]);
            index= prevIndex;
        }
        return ans;
    }
}
