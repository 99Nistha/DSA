recursion:
class Solution {
    public int maxProfit(int[] prices) {
        return helper(0, 1, 2, prices);
    }
    public int helper(int index, int state, int transaction, int[] prices){
        if(transaction==0) return 0;
        if(index==prices.length) return 0;
        //buy
        if(state==1){
            int buyIt= -prices[index]+ helper(index+1, 2, transaction, prices);
            int dontBuy= helper(index+1, 1, transaction, prices);
            return Math.max(buyIt, dontBuy);
        }else{
            int sellIt= prices[index]+ helper(index+1, 1, transaction-1, prices);
            int dontSell= helper(index+1, 2, transaction, prices);
            return Math.max(sellIt, dontSell);
        }
    }
}

memo:
class Solution {
    public int maxProfit(int[] prices) {
        int[][][] dp= new int[prices.length][2][3];
        return helper(0, 1, 2, prices, dp);
    }
    public int helper(int index, int state, int transaction, int[] prices, int[][][] dp){
        if(transaction==0) return 0;
        if(index==prices.length) return 0;
        if(dp[index][state][transaction]!=0) return dp[index][state][transaction];
        //buy
        if(state==1){
            int buyIt= -prices[index]+ helper(index+1, 0, transaction, prices, dp);
            int dontBuy= helper(index+1, 1, transaction, prices, dp);
            return dp[index][state][transaction]= Math.max(buyIt, dontBuy);
        }else{
            int sellIt= prices[index]+ helper(index+1, 1, transaction-1, prices, dp);
            int dontSell= helper(index+1, 0, transaction, prices, dp);
            return dp[index][state][transaction]= Math.max(sellIt, dontSell);
        }
    }
}

tabulation:
class Solution {
    public int maxProfit(int[] prices) {
        int[][][] dp= new int[prices.length+1][2][3];
        for(int index=prices.length-1; index>=0; index--){
            for(int state= 0; state<2; state++){
                for(int transaction=1; transaction>=0; transaction--){
                    if(state==1){
                        int buyIt= -prices[index]+ dp[index+1][0][transaction];
                        int dontBuy= dp[index+1][1][transaction];
                        dp[index][state][transaction]= Math.max(buyIt, dontBuy);
                    }else{
                        int sellIt= prices[index]+ dp[index+1][1][transaction+1];
                        int dontSell= dp[index+1][0][transaction];
                        dp[index][state][transaction]= Math.max(sellIt, dontSell);
                    }
                }
            }
        }
        return dp[0][1][0];
    }
}

space opt:
class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp= new int[2][3];
        for(int index=prices.length-1; index>=0; index--){
            for(int state= 0; state<2; state++){
                for(int transaction=1; transaction>=0; transaction--){
                    if(state==1){
                        int buyIt= -prices[index]+ dp[0][transaction];
                        int dontBuy= dp[1][transaction];
                        dp[state][transaction]= Math.max(buyIt, dontBuy);
                    }else{
                        int sellIt= prices[index]+ dp[1][transaction+1];
                        int dontSell= dp[0][transaction];
                        dp[state][transaction]= Math.max(sellIt, dontSell);
                    }
                }
            }
        }
        return dp[1][0];
    }
}

1d:
class Solution {
    public int maxProfit(int[] prices) {
        int[] dp= new int[5];
        for(int index=prices.length-1; index>=0; index--){
            for(int transaction=3; transaction>=0; transaction--){
                if(transaction%2==0){
                    int buyIt= -prices[index]+ dp[transaction+1];
                    int dontBuy= dp[transaction];
                    dp[transaction]= Math.max(buyIt, dontBuy);
                }else{
                    int sellIt= prices[index]+ dp[transaction+1];
                    int dontSell= dp[transaction];
                    dp[transaction]= Math.max(sellIt, dontSell);
                }
            }
        }
        return dp[0];
    }
}
