class Solution {
    public int rob(int[] nums) {
        int n= nums.length;
        if(n==1) return nums[0];
        ArrayList<Integer> n1= new ArrayList<>();
        ArrayList<Integer> n2= new ArrayList<>();
        for(int i=0;i<n; i++){
            if(i!=0) n1.add(nums[i]);
            if(i!=n-1) n2.add(nums[i]);
        }
        return Math.max(helper(n1), helper(n2));
        
    }
    public int helper(ArrayList<Integer> nums){
        int n= nums.size();
        int past=nums.get(0);
        int prevPast=0;
        int curr=0;
        for(int i=1; i<n; i++){
            int pick=nums.get(i);
            if(i>1) pick+= prevPast;
            int notPick= 0+ past;
            curr= Math.max(pick, notPick);
            prevPast= past;
            past= curr;
        }
        return past;
    }
}
