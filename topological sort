import java.util.*;
import java.io.*;

// This class represents a directed graph using adjacency list representation
class Graph{
    private int V;
    private ArrayList<ArrayList<Integer>> adj;
    
    Graph(int v){
        V= v;
        adj= new ArrayList<ArrayList<Integer>>(v);// if v=3
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());// [[]], [[]], [[]]
        }
    }
    
    void addEdge(int v, int w){
        adj.get(v).add(w);
    }
    
    void dfs (int v, boolean visited[], Stack<Integer> stack){
        visited[v]= true;
        for(Integer it: adj.get(v)){
            if(!visited[it]) dfs(it, visited, stack);
        }
        stack.push(new Integer(v));
    }
    
    void topologicalSort(){
        Stack<Integer> stack= new Stack<>();
        boolean visited[]= new boolean[V];
        Arrays.fill(visited, false);
        for(int i=0;i<V;i++){
            if(visited[i]==false) dfs(i, visited, stack);
        }
        while(!stack.isEmpty()) System.out.print(stack.pop()+" ");
    }
    
    public static void main(String args[]){
        Graph g= new Graph(6);
        g.addEdge(5, 2);
        g.addEdge(5, 0);
    	g.addEdge(4, 0);
    	g.addEdge(4, 1);
    	g.addEdge(2, 3);
    	g.addEdge(3, 1);
    	
    	g.topologicalSort();
    }
}
