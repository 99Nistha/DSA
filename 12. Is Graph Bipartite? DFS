//dfs
class Solution {
    public boolean isBipartite(int[][] graph) {
        int[] color= new int[graph.length];
        for(int i=0;i<graph.length;i++){
            if(color[i]==0) 
                if(!dfs(i, color, graph, -1)) return false;
        }
        return true;
    }
    
    public boolean dfs(int node, int[] color, int[][] graph, int col){
        color[node]= col;
        for(int it: graph[node]){
            if(color[it]!=0){
                if(color[it]==color[node]) return false;
            }else{
                if(!dfs(it, color, graph, -color[node])) return false;
            }
        }
        return true;
    }
}
/*tc-> o(n+e)
  sc-> o(n+e) graph
       +o(n) color array
       + o(n) auxilary recursive*/
