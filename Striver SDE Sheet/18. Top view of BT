class Pair{
    Node root;
    int hd;
    Pair(Node root, int hd){
        this.root= root;
        this.hd=hd;
    }
}
class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        ArrayList <Integer> list= new ArrayList<>();
        if(root==null) return list;
        Queue<Pair> q= new LinkedList<>();
        Map<Integer, Integer> map= new HashMap<>();
        int firstIndex=0;
        int lastIndex=0;
        q.add(new Pair(root, 0));
        while(!q.isEmpty()){
            int size= q.size();
            for(int i=0;i<size;i++){
                Pair currPair= q.remove();//1
                int currHd= currPair.hd;
                Node curr= currPair.root;
                if(!map.containsKey(currHd)) map.put(currHd, curr.data); // 0->1
                if(curr.left!=null){
                    q.add(new Pair(curr.left, currHd-1));
                    firstIndex= Math.min(currHd-1, firstIndex);
                }
                if(curr.right!=null){
                    q.add(new Pair(curr.right, currHd+1));
                    lastIndex= Math.max(currHd+1, lastIndex);
                }
            }
        }
        while(firstIndex<=lastIndex){
            if(map.containsKey(firstIndex)) {
                list.add(map.get(firstIndex));
            }
            firstIndex++;
        }
        return list;
    }
}
