class Solution {
    // Function to detect cycle in a directed graph.
    private static boolean checkCycle(int node,  ArrayList<ArrayList<Integer>> adj, int vis[], int dfsVis[]) {
        vis[node]=1;
        dfsVis[node]=1;
        
        for(int it: adj.get(node)){
            if(vis[it]==0){
                if(checkCycle(it, adj, vis, dfsVis)) return true;
            }else if(dfsVis[it]==1) return true;// found the same element in the same dfs call that means cycle
        }
        dfsVis[node]=0;
        return false;
    }
	
    public static boolean isCyclic(int N, ArrayList<ArrayList<Integer>> adj) {
        int[] visited= new int[N];
        int[] dfsVisited= new int[N];
        for(int i=0;i<N;i++){
            if(visited[i]==0){
                if(checkCycle(i, adj, visited, dfsVisited)) return true;
            }
        }
        return false;
    }
} 
