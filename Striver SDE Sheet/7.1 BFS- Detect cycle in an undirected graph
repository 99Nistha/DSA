class Node{
    int node;
    int parent;
    public Node(int node, int parent){
        this.node= node;
        this.parent= parent;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited= new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(checkForCycle(i, adj, visited)) return true;
            }
        }
        return false;
    }
    public boolean checkForCycle(int curr, ArrayList<ArrayList<Integer>> adj, boolean[] visited){
        Queue<Node> queue= new LinkedList<>();
        queue.add(new Node(curr, -1));
        visited[curr]=true;
        
        while(!queue.isEmpty()){
            int node= queue.peek().node;
            int parent= queue.peek().parent;
            queue.remove();
            for(int it :adj.get(node)){
                if(!visited[it]){
                    queue.add(new Node(it, node));
                    visited[it]= true;
                }else if(it!=parent) return true;
            }
        }
        return false;
    }
}
