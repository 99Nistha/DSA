class Node{
    int node;
    int dist;
    int getNode(){return node;}
    Node(int node, int dist){
        this.node= node;
        this.dist= dist;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int[] distance= new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);
        PriorityQueue<Node> pq= new PriorityQueue<Node>((a,b)-> (a.dist-b.dist));
        pq.add(new Node(S, 0));
        distance[S]= 0;
        
        while(pq.size()!=0){
            Node n= pq.remove();
            int prevNode= n.getNode();
            for(ArrayList<Integer> it: adj.get(prevNode)){
                int node= it.get(0);
                int dist= it.get(1);
                if(distance[prevNode]+ dist < distance[node]){
                    distance[node]= distance[prevNode]+ dist;
                    pq.add(new Node(node, distance[node]));
                }
            }
        }
        return distance;
    }
}
