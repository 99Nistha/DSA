class DisjointSet{
    List<Integer> parent= new ArrayList<>();
    List<Integer> size= new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0;i<=n;i++){
            parent.add(i);
            size.add(0);
        }
    }
    
    public int findUPar(int node){
        if(node==parent.get(node)) return node;
        return findUPar(parent.get(node));
    }
    
    public void unionBySize(int u, int v){
        int ulp_u= findUPar(u);
        int ulp_v= findUPar(v);
        if(ulp_u== ulp_v) return;
        int sum= size.get(ulp_u)+ size.get(ulp_v);
        if(size.get(ulp_u)<size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, sum);
        }else{
           parent.set(ulp_v, ulp_u);
            size.set(ulp_u, sum);
        }
    }
    
}
class Solution {
    public int findCircleNum(int[][] isConnected) {
        if(isConnected.length==0 || isConnected[0].length==0) return 0;
        int n= isConnected.length;
        DisjointSet ds= new DisjointSet(n-1);
        Set<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j ++){
                if (isConnected[i][j] == 1){
                    ds.unionBySize(i,j);
                }
            }
        }
        for(int i=0; i<n; i++){
            set.add(ds.findUPar(i));
        }
        return set.size();
    }
}
