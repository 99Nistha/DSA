
class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> res= new ArrayList<>();
        boolean[] visited= new boolean[V];
        res.add(0);
        visited[0]=true;
        for(int val: adj.get(0)){
            if(!visited[val]) dfs(val, adj, res, visited);
        }
        return res;
    }
    
    public void dfs(int curr, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> res, boolean[] visited){
        if(adj.get(curr).size()==0) return;
        res.add(curr);
        visited[curr]= true;
        for(int val: adj.get(curr)){
            if(!visited[val]) dfs(val, adj, res, visited);
        }
    }
}
