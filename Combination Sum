class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res= new ArrayList<>();
        if(candidates== null || candidates.length==0) return res;
        findPairs(0, candidates, target, res, new ArrayList<>());
        return res;
    }
    
    public void findPairs(int idx, int[] candidates, int target, List<List<Integer>> res, List<Integer> pair){
         // 0, 7, empty
        if(idx==candidates.length){
            if(target==0) res.add(new ArrayList<>(pair));
            return;
        }
        //pick
        if(target>=candidates[idx]){
            pair.add(candidates[idx]);
            findPairs(idx, candidates, target-candidates[idx], res, pair);
            pair.remove(pair.size()-1);
        }
        //not pick
        findPairs(idx+1, candidates, target, res, pair);
    }
}
